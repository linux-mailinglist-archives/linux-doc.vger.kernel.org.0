Return-Path: <linux-doc+bounces-29902-lists+linux-doc=lfdr.de@vger.kernel.org>
X-Original-To: lists+linux-doc@lfdr.de
Delivered-To: lists+linux-doc@lfdr.de
Received: from sv.mirrors.kernel.org (sv.mirrors.kernel.org [139.178.88.99])
	by mail.lfdr.de (Postfix) with ESMTPS id 3EBD39BC7F2
	for <lists+linux-doc@lfdr.de>; Tue,  5 Nov 2024 09:24:36 +0100 (CET)
Received: from smtp.subspace.kernel.org (wormhole.subspace.kernel.org [52.25.139.140])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by sv.mirrors.kernel.org (Postfix) with ESMTPS id 048E12859F1
	for <lists+linux-doc@lfdr.de>; Tue,  5 Nov 2024 08:24:35 +0000 (UTC)
Received: from localhost.localdomain (localhost.localdomain [127.0.0.1])
	by smtp.subspace.kernel.org (Postfix) with ESMTP id 1F51B18C93B;
	Tue,  5 Nov 2024 08:24:27 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org;
	dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b="auP/m0oW"
X-Original-To: linux-doc@vger.kernel.org
Received: from smtp.kernel.org (aws-us-west-2-korg-mail-1.web.codeaurora.org [10.30.226.201])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by smtp.subspace.kernel.org (Postfix) with ESMTPS id EF1F5762D2
	for <linux-doc@vger.kernel.org>; Tue,  5 Nov 2024 08:24:25 +0000 (UTC)
Authentication-Results: smtp.subspace.kernel.org; arc=none smtp.client-ip=10.30.226.201
ARC-Seal:i=1; a=rsa-sha256; d=subspace.kernel.org; s=arc-20240116;
	t=1730795067; cv=none; b=lNgg/pFEYt0S3zdfYpatlWROmiEr+QJZ8QJrSSI4OMQpkTmg7qVSXUU6PISutL+9i0SuQCJrDlYsu3d96M4/knMly/PqeTL2PUdOH1M50gmKxLP5LcG0QL5aZjPbIYNrCMxhGAqDSElYvykykHiANKOtqbyhi42RE014rWufFAE=
ARC-Message-Signature:i=1; a=rsa-sha256; d=subspace.kernel.org;
	s=arc-20240116; t=1730795067; c=relaxed/simple;
	bh=WQVoBMcMnd4cN6ltZQpIlUoMB/qRd46baYLHrOsqSF0=;
	h=Date:Message-ID:From:To:Cc:Subject:In-Reply-To:References:
	 MIME-Version:Content-Type; b=j0X2wIj4VU04cDc7YlS9gt91paA9F7OXWd7bG4kg2axQeIHoxTXLLlE2HstFZEW5J3C2nkQiwkgU3wSZW1Tn60LVnNDqzbzCsn4Puu2/rtncrerq6ZqhpwYoFdVnwl6rqw/P1Q2hf2l2NDCqXOnscK4Eck56FSTgK7ETlxN7apg=
ARC-Authentication-Results:i=1; smtp.subspace.kernel.org; dkim=pass (2048-bit key) header.d=kernel.org header.i=@kernel.org header.b=auP/m0oW; arc=none smtp.client-ip=10.30.226.201
Received: by smtp.kernel.org (Postfix) with ESMTPSA id 66C60C4CECF;
	Tue,  5 Nov 2024 08:24:25 +0000 (UTC)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=kernel.org;
	s=k20201202; t=1730795065;
	bh=WQVoBMcMnd4cN6ltZQpIlUoMB/qRd46baYLHrOsqSF0=;
	h=Date:From:To:Cc:Subject:In-Reply-To:References:From;
	b=auP/m0oWrp2ePgbVkWlucJ56Ump4yD5v143VUk6HqWh4kJDg0wltjO3BZlYv+V/Ue
	 7T8KQ/vFNc1l2Pygov8WrhG1oXtowc8gks8x48H4STJYNXdoZXm87LXVLPhVqVSJDF
	 zJW5Hpam6OdLKTsQYaJc+kWlkyHbAN2rJXK0OHrFvW+Sg+bc/hBdpw4318KQpMAF3e
	 gyYdT8Qd1le702Y+tunf2GUP8XLdbo+0b3j1+0Zkwp+uzbhSC9VvCmYO2yNhKJM2jK
	 rLYNkN2+Vmy5jnXZ0m5ebFVsyO6unzIaTq9ZG9YMcchQFsHtyttzCTQUw1khhmsWS3
	 9Kr0vUudRYKqA==
Received: from 82-132-233-10.dab.02.net ([82.132.233.10] helo=wait-a-minute.misterjones.org)
	by disco-boy.misterjones.org with esmtpsa  (TLS1.3) tls TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
	(Exim 4.95)
	(envelope-from <maz@kernel.org>)
	id 1t8ErN-009uTa-9L;
	Tue, 05 Nov 2024 08:24:23 +0000
Date: Tue, 05 Nov 2024 08:24:18 +0000
Message-ID: <87ed3qt7f1.wl-maz@kernel.org>
From: Marc Zyngier <maz@kernel.org>
To: Zhou Wang <wangzhou1@hisilicon.com>
Cc: <tglx@linutronix.de>,
	<linux-arm-kernel@lists.infradead.org>,
	<linux-doc@vger.kernel.org>,
	Nianyao Tang <tangnianyao@huawei.com>
Subject: Re: [PATCH] irqchip/gicv3-its: Add workaround for hip09 ITS erratum 162100801
In-Reply-To: <20241104121143.2169264-1-wangzhou1@hisilicon.com>
References: <20241104121143.2169264-1-wangzhou1@hisilicon.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI-EPG/1.14.7 (Harue)
 FLIM-LB/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL-LB/10.8 EasyPG/1.0.0 Emacs/29.4
 (x86_64-pc-linux-gnu) MULE/6.0 (HANACHIRUSATO)
Precedence: bulk
X-Mailing-List: linux-doc@vger.kernel.org
List-Id: <linux-doc.vger.kernel.org>
List-Subscribe: <mailto:linux-doc+subscribe@vger.kernel.org>
List-Unsubscribe: <mailto:linux-doc+unsubscribe@vger.kernel.org>
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
X-SA-Exim-Connect-IP: 82.132.233.10
X-SA-Exim-Rcpt-To: wangzhou1@hisilicon.com, tglx@linutronix.de, linux-arm-kernel@lists.infradead.org, linux-doc@vger.kernel.org, tangnianyao@huawei.com
X-SA-Exim-Mail-From: maz@kernel.org
X-SA-Exim-Scanned: No (on disco-boy.misterjones.org); SAEximRunCond expanded to false

On Mon, 04 Nov 2024 12:11:43 +0000,
Zhou Wang <wangzhou1@hisilicon.com> wrote:
> 
> When enabled GICv4.1 in hip09, VMAPP will fail to clear some caches

nit: enabling.

> during unmapping operation, which will cause some vSGIs interrupts lost.
> 
> To fix the issue, it needs to send vinvall command after vmovp.

nit: commands need to be in capital letters (VINVALL, VMOVP). drop
'interrupts'.

>
> Signed-off-by: Nianyao Tang <tangnianyao@huawei.com>
> Signed-off-by: Zhou Wang <wangzhou1@hisilicon.com>
> ---
>  Documentation/arch/arm64/silicon-errata.rst |  2 ++
>  arch/arm64/Kconfig                          | 10 ++++++
>  drivers/irqchip/irq-gic-v3-its.c            | 36 ++++++++++++++++-----
>  3 files changed, 40 insertions(+), 8 deletions(-)
> 
> diff --git a/Documentation/arch/arm64/silicon-errata.rst b/Documentation/arch/arm64/silicon-errata.rst
> index 65bfab1b1861..77db10e944f0 100644
> --- a/Documentation/arch/arm64/silicon-errata.rst
> +++ b/Documentation/arch/arm64/silicon-errata.rst
> @@ -258,6 +258,8 @@ stable kernels.
>  | Hisilicon      | Hip{08,09,10,10C| #162001900      | N/A                         |
>  |                | ,11} SMMU PMCG  |                 |                             |
>  +----------------+-----------------+-----------------+-----------------------------+
> +| Hisilicon      | Hip09           | #162100801      | HISILICON_ERRATUM_162100801 |
> ++----------------+-----------------+-----------------+-----------------------------+
>  +----------------+-----------------+-----------------+-----------------------------+
>  | Qualcomm Tech. | Kryo/Falkor v1  | E1003           | QCOM_FALKOR_ERRATUM_1003    |
>  +----------------+-----------------+-----------------+-----------------------------+
> diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
> index fd9df6dcc593..27082e075d1a 100644
> --- a/arch/arm64/Kconfig
> +++ b/arch/arm64/Kconfig
> @@ -1232,6 +1232,16 @@ config HISILICON_ERRATUM_161600802
>  
>  	  If unsure, say Y.
>  
> +config HISILICON_ERRATUM_162100801
> +	bool "Hip09 162100801 erratum support"
> +	default y
> +	help
> +	  When enabled GICv4.1 in hip09, VMAPP will fail to clear some caches
> +	  during unmapping operation, which will cause some vSGIs interrupts
> +	  lost. So fix it by sending vinvall commands after vmovp.

Same remarks as above.

Now, the workaround seems odd. I understand from the description that
VMAPP with V=0 results in leftover cached entries influencing the
behaviour of a newly created VPE.

But if it is a VINVALL on each CPU that cures it, why don't we do that
upfront, instead of on every single VMOVP?

Or is the problem that VMAPP(V=0) can result in *existing* VPEs to
observe an unrelated (or corrupted) state?

> +
> +	  If unsure, say Y.
> +
>  config QCOM_FALKOR_ERRATUM_1003
>  	bool "Falkor E1003: Incorrect translation due to ASID change"
>  	default y
> diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
> index 52f625e07658..69b09072d24d 100644
> --- a/drivers/irqchip/irq-gic-v3-its.c
> +++ b/drivers/irqchip/irq-gic-v3-its.c
> @@ -44,6 +44,7 @@
>  #define ITS_FLAGS_WORKAROUND_CAVIUM_22375	(1ULL << 1)
>  #define ITS_FLAGS_WORKAROUND_CAVIUM_23144	(1ULL << 2)
>  #define ITS_FLAGS_FORCE_NON_SHAREABLE		(1ULL << 3)
> +#define ITS_FLAGS_WORKAROUND_HISILICON_162100801	(1ULL << 4)
>  
>  #define RD_LOCAL_LPI_ENABLED                    BIT(0)
>  #define RD_LOCAL_PENDTABLE_PREALLOCATED         BIT(1)
> @@ -1314,6 +1315,14 @@ static void its_send_vmapp(struct its_node *its,
>  	its_send_single_vcommand(its, its_build_vmapp_cmd, &desc);
>  }
>  
> +static void its_send_vinvall(struct its_node *its, struct its_vpe *vpe)
> +{
> +	struct its_cmd_desc desc;
> +
> +	desc.its_vinvall_cmd.vpe = vpe;
> +	its_send_single_vcommand(its, its_build_vinvall_cmd, &desc);
> +}
> +
>  static void its_send_vmovp(struct its_vpe *vpe)
>  {
>  	struct its_cmd_desc desc = {};
> @@ -1351,17 +1360,12 @@ static void its_send_vmovp(struct its_vpe *vpe)
>  
>  		desc.its_vmovp_cmd.col = &its->collections[col_id];
>  		its_send_single_vcommand(its, its_build_vmovp_cmd, &desc);
> +		if (is_v4_1(its) && (its->flags &
> +			    ITS_FLAGS_WORKAROUND_HISILICON_162100801))
> +			its_send_vinvall(its, vpe);
>  	}
>  }

Please don't bury workarounds inside the command primitives (and VMOVP
is complicated enough). There is a single place where we send VMOVP,
and I'd rather you place the workaround there.

But more importantly, this code isn't supposed to get executed with a
GICv4.1 implementation, as the driver does not expect it to use an
ITSList.

So what is your system implementing? Do you have such thing as GICv4.1
with ITSList? If so, I'm pretty sure the driver is broken on with such
mix...

Thanks,

	M.

-- 
Without deviation from the norm, progress is not possible.

